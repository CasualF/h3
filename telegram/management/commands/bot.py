

from django.core.management.base import BaseCommand
import telebot
from django.conf import settings
from telebot import types
import requests
from bs4 import BeautifulSoup

bot = telebot.TeleBot(settings.TELEGRAM_BOT_API_KEY, threaded=False)


class Command(BaseCommand):
    help = '–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ Telegram –≤ Django'

    def handle(self, *args, **kwargs):
        bot.remove_webhook()
        bot.polling(none_stop=True, interval=0, timeout=20)


WELCOME_MESSAGE = (
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏–π!\n'
    '–ú—ã –≥–æ—Ä–¥–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Ö, '
    '–∫—Ç–æ —Å—Ç—Ä–µ–º–∏—Ç—Å—è —Ä–∞–∑–≤–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ —Å—Ñ–µ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –¥–æ—Å—Ç–∏—á—å '
    '–Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç –≤ —Å–≤–æ–µ–π –∫–∞—Ä—å–µ—Ä–µ.\n\n'
    '–ù–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏:'
)

AREAS_MESSAGE = (
    '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–ª—é—á–µ–≤—É—é –æ–±–ª–∞—Å—Ç—å:\n\n'
    'üåê Frontend - —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö '
    '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n\n'
    'üíº Backend - —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –æ—Ç–≤–µ—á–∞—é—â–µ–µ –∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, '
    '—Ä–∞–±–æ—Ç—É —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏.'
)

FRONTEND_SUBAREAS = (
    '–í—ã –≤—ã–±—Ä–∞–ª–∏ Frontend. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:\n\n'
    'üåê JavaScript - —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n\n'
    'üé® UI/UX –î–∏–∑–∞–π–Ω - –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏ –æ–ø—ã—Ç–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.'
)

EXIT_MESSAGE = '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –±–æ—Ç–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'

states = {}


@bot.message_handler(commands=['start'])
def start_message(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button1 = types.KeyboardButton('üìû –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
    button2 = types.KeyboardButton('üöÄ –ö–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏')
    button3 = types.KeyboardButton('üì∞ –ù–æ–≤–æ—Å—Ç–∏')
    button4 = types.KeyboardButton('‚ùå –í—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞')
    keyboard.add(button1, button2, button3, button4)

    bot.send_message(message.chat.id, WELCOME_MESSAGE, reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == 'üìû –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
def support_message(message):
    response = ('–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n'
                '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏ akusevtimur733@gmail.com\n'
                '...')

    bot.send_message(message.chat.id, response)


@bot.message_handler(func=lambda message: message.text == 'üöÄ –ö–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏')
def areas_message(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button1 = types.KeyboardButton('üåê Frontend')
    button2 = types.KeyboardButton('üíº Backend')
    button3 = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
    keyboard.add(button1, button2, button3)

    bot.send_message(message.chat.id, AREAS_MESSAGE, reply_markup=keyboard)
    states[message.chat.id] = 'areas_message'


@bot.message_handler(func=lambda message: message.text == 'üåê Frontend')
def frontend_subareas(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button1 = types.KeyboardButton('üåê JavaScript')
    button2 = types.KeyboardButton('üé® UI/UX –î–∏–∑–∞–π–Ω')
    button3 = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
    keyboard.add(button1, button2, button3)

    bot.send_message(message.chat.id, FRONTEND_SUBAREAS, reply_markup=keyboard)
    states[message.chat.id] = 'frontend_subareas'


@bot.message_handler(func=lambda message: message.text == 'üîô–ù–∞–∑–∞–¥')
def back(message):
    if message.chat.id in states:
        if states[message.chat.id] == 'areas_message':
            start_message(message)
        elif states[message.chat.id] == 'frontend_subareas':
            areas_message(message)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")


@bot.message_handler(func=lambda message: message.text == '‚ùå –í—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞')
def exit_bot(message):
    bot.send_message(message.chat.id, EXIT_MESSAGE)


@bot.message_handler(func=lambda message: message.text == 'üé® UI/UX –î–∏–∑–∞–π–Ω')
def ui_ux_design(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    price_button = types.KeyboardButton('üí≤–¶–µ–Ω–∞ –∏ —Å—Ä–æ–∫–∏üìÖ')
    learn_button = types.KeyboardButton('üìä–°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—èüìà')
    back_button = types.KeyboardButton('üîôH–∞–∑–∞–¥')
    keyboard.add(price_button, learn_button, back_button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ UI/UX –î–∏–∑–∞–π–Ω–µ:", reply_markup=keyboard)
    states[message.chat.id] = 'ui_ux_design'


@bot.message_handler(func=lambda message: message.text == 'üîôH–∞–∑–∞–¥')
def back(message):
    if message.chat.id in states:
        if states[message.chat.id] == 'ui_ux_design':
            start_message(message)
        elif states[message.chat.id] == 'ui_ux_design':
            areas_message(message)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")

@bot.message_handler(func=lambda message: message.text == 'üí≤–¶–µ–Ω–∞ –∏ —Å—Ä–æ–∫–∏üìÖ')
def show_price_info(message):
    url = 'https://itlogia.ru/uxui'
    response = requests.get(url)
    htmltext = response.text
    soup = BeautifulSoup(htmltext, 'lxml')

    price_element = soup.find('div', id='price')
    price_blocks = price_element.find_all('div', class_='price-block')

    price_info = []

    for block in price_blocks:
        price_value = block.find('span', class_='price-number').text.strip()
        price_unit = block.find('span', class_='price-unit').text.strip()
        price_description = block.find('div', class_='price-description').text.strip()

        price_info.append("–¶–µ–Ω–∞: " + price_value + price_unit + "\n" + "–û–ø–∏—Å–∞–Ω–∏–µ: " + price_description)

    all_price_info = "\n\n".join(price_info)

    bot.send_message(message.chat.id, all_price_info)


@bot.message_handler(func=lambda message: message.text == 'üìä–°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—èüìà')
def show_learn_info(message):
    url = 'https://itlogia.ru/uxui'
    response = requests.get(url)
    htmltext = response.text
    soup = BeautifulSoup(htmltext, 'lxml')

    will_learn_title = soup.find('div', class_='will-learn-title')
    course_title = will_learn_title.text.strip()
    will_learn_list_ux = soup.find('div', class_='will-learn-list ux active')
    ul_elements = will_learn_list_ux.find_all('ul')

    learn_items = []

    for ul in ul_elements:
        li_elements = ul.find_all('li')
        for li in li_elements:
            learn_items.append(li.text.strip())

    learn_text_button = "\n".join(learn_items)

    bot.send_message(message.chat.id, learn_text_button)





@bot.message_handler(func=lambda message: message.text == 'üåê JavaScript')
def java_script(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    price_button = types.KeyboardButton('üí≤–¶–µ–Ω–∞ –∏ c—Ä–æ–∫–∏üìÖ')
    learn_button = types.KeyboardButton('üìä–°–∏c—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—èüìà')
    back_button = types.KeyboardButton('üîô–ùa–∑–∞–¥')
    keyboard.add(price_button, learn_button, back_button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ JavaScript:", reply_markup=keyboard)
    states[message.chat.id] = 'java_script'

@bot.message_handler(func=lambda message: message.text == 'üîô–ùa–∑–∞–¥')
def back(message):
    if message.chat.id in states:
        if states[message.chat.id] == 'java_script':
            start_message(message)
        elif states[message.chat.id] == 'java_script':
            areas_message(message)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")

@bot.message_handler(func=lambda message: message.text == 'üí≤–¶–µ–Ω–∞ –∏ c—Ä–æ–∫–∏üìÖ')
def show_price_info(message):
    url = 'https://itlogia.ru/front'
    response = requests.get(url)
    htmltext = response.text
    soup = BeautifulSoup(htmltext, 'lxml')

    price_element = soup.find('div', id='price')
    price_blocks = price_element.find_all('div', class_='price-block')

    price_info = []

    for block in price_blocks:
        price_value = block.find('span', class_='price-number').text.strip()
        price_unit = block.find('span', class_='price-unit').text.strip()
        price_description = block.find('div', class_='price-description').text.strip()

        price_info.append("–¶–µ–Ω–∞: " + price_value + price_unit + "\n" + "–û–ø–∏—Å–∞–Ω–∏–µ: " + price_description)

    all_price_info = "\n\n".join(price_info)

    bot.send_message(message.chat.id, all_price_info)


@bot.message_handler(func=lambda message: message.text == 'üìä–°–∏c—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—èüìà')
def show_learn_info(message):
    url = 'https://itlogia.ru/front'
    response = requests.get(url)
    htmltext = response.text
    soup = BeautifulSoup(htmltext, 'html.parser')
    skills_items = soup.find('div', id='skills-items')
    skill_items = skills_items.find_all('div', class_='skill-item')

    learn_text = []

    for skill_item in skill_items:
        skill_text = skill_item.get_text(strip=True)
        skill_text_cleaned = skill_text[2:]
        learn_text.append(skill_text_cleaned)

    all_learn_text = "\n".join(learn_text)

    bot.send_message(message.chat.id, all_learn_text)



@bot.message_handler(func=lambda message: message.text == 'üì∞ –ù–æ–≤–æ—Å—Ç–∏')
def send_news(message):
    base_url = "https://itlogia.ru/blog?category=it_industry"
    response = requests.get(base_url)

    if response.status_code == 200:
        soup = BeautifulSoup(response.content, 'html.parser')

        articles = soup.find_all("div", class_="article")

        articles_data = []

        for article in articles:
            title_element = article.find("a", class_="article-title")
            text_element = article.find("div", class_="article-text")
            details_element = article.find("div", class_="article-details")

            if title_element and text_element and details_element:
                title = title_element.get_text(strip=True)
                text = text_element.get_text(strip=True)
                details = details_element.get_text(strip=True)

                image_element = article.find("img")
                if image_element:
                    image_url = base_url + image_element["src"]
                else:
                    image_url = None

                article_url = base_url + title_element["href"]

                article_data = {
                    "–ó–∞–≥–æ–ª–æ–≤–æ–∫": title,
                    "–°—Å—ã–ª–∫–∞": article_url,
                    "–¢–µ–∫—Å—Ç": text,
                    "–î–µ—Ç–∞–ª–∏": details,
                    "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": image_url
                }

                articles_data.append(article_data)


        max_articles_to_send = 5
        for i, article_data in enumerate(articles_data[:max_articles_to_send], start=1):
            news_text = f"–°—Ç–∞—Ç—å—è {i}:\n"
            news_text += f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {article_data['–ó–∞–≥–æ–ª–æ–≤–æ–∫']}\n"
            news_text += f"–°—Å—ã–ª–∫–∞: {article_data['–°—Å—ã–ª–∫–∞']}\n"
            news_text += f"–¢–µ–∫—Å—Ç: {article_data['–¢–µ–∫—Å—Ç']}\n"
            news_text += f"–î–µ—Ç–∞–ª–∏: {article_data['–î–µ—Ç–∞–ª–∏']}\n"
            # news_text += f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {article_data['–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ']}\n\n"
            bot.send_message(message.chat.id, news_text)



bot.polling()